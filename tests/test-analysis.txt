testall.sh compiles all (most) of the pascal source files in the src/ sub-
directory.  The src/ sub-directory contains various pascal programs found by
scouring the internet (most not attributed here.. sorry).  As of this
writing, the following errors are reported when testall.sh is ran:

 1. Several test cases found on the internet failed because they involved the
    use of non-standard Pascal types('filename', 'list', 'word', 'longword) and
    undefined functions, and  procedures (fsplit, addr, length, lowercase,
    etc.).  These test cases have been removed because there will never
    compile.
 2. Currently a set is limited to 32 elements so that they can be represented
    internally as a 32-bit bit set.
 3. I/O operations on most types of arrays and records are not fully
    implemented.  See src/107-quicksort.pas
 4. Forward references to variables before they are defined do not work.  See
    failure in src/108-pointerrecode.pas.
 5. There are a couple of files with initialization like:
      input = 1;
      output = 2;
    I am not sure what these mean and have just commented them out for now.
    Assignment of a numeric value to a file is not supported.
 6. Pascal runtime memory is divided into three regions:  String stack, RO
    data, and the Pascal run-time stack.  The size of the string stack is
    set with the -t option to prun and 1024 is the default size used by the
    testone.sh script.  String allocations are large, 256 bytes, and the
    string stack is lazy, only when a procedure/function returns.  As a
    result, programs with functions that do a lot of string operations need
    a start larger than the 1024 default.  All of the test files here work
    OK with a string stack of 1024.

Successful test results are not shown.

########src/008-setcolors.pas########/
Line 0:0008 Error 0a Token 3a

Line:
 7 const
 8 names : array [color] of String[7]
     = ('red', 'blue', 'yellow', 'green', 'white', 'black', 'orange');

Error:
186 #define eEQ              ((uint16_t) 0x0a) <-- Expected '='

Token: ':'

Analysis:
This fails because the compiler does not expect encounter a type in a const
definition.  The function pas_DeclareConst() always expects to see '='
following the constant identifier.

An appropriate fix might involve repartitioning pas_DeclareVar() so that the
part that creates the (nameless) type could be called from pas_DeclareConst().

########src/009-stringarray.pas########
Compiles okay but there are run-time errors in the output:

  To come to the aid of their part
  To come to the aid of their party.

Instead of:

  Now is the time for all good men
  To come to the aid of their party.

Analysis:
I have not looked at this yet.  I am suspecting an indexing problem.

########src/012-stringrecordarray.pas########
Line 0:0020 Error 52 Token 54

Line:
 20    Names[1].title := 'Name 1';

Error:
265 #define eRECORDOBJECT    ((uint16_t) 0x52)

Token:
 92 #define sRECORD_OBJECT   0x54

Analysis:
The parsing logic currently expects a RECORD name to be following by '.' in
this context.

########src/013-filerecordarray.pas########
Line 0:0010 Error 1e Token 01 (NameString)

Line:
 10    Files : array[1..3] of NameString;

Error:
209 #define eINVTYPE         ((uint16_t) 0x1e)

Token:
 44 #define tIDENT           0x01

Analysis:

########src/014-arrayrecord.pas########
Line 0:0014 Error 21 Token 2c

Line:
 12 procedure printBook( var name : NameString );
 13 begin
 14   writeln(name.title, ': ', name.info);
 15 end;

Error:
#define eLBRACKET        ((uint16_t) 0x21)

Token: ','

Analysis:
This some of the traditonal Pascal behavior that is not implemented.  'title' is
declared as an array:

NameString =
  record
     title: packed array [1..50] of char;
     info:  packed array [1..50] of char;
  end;

But accessed without indexing:

   writeln(name.title, ': ', name.info);

Even though title is an array, no index is required for the special case of
packed array of char.

More modern Pascal implement added type string for these cases.  Is backward
compatible support needed?

########src/104-primes.pas########
Line 0:0012 Error 4d Token 3b

Line (in var section):
 12   sieve, primes : array[0..w] of set of 0..maxbit;

Where (in const section)
  8   maxbit = 58;

Error:
241 #define eEXPRTYPE        ((uint16_t) 0x3d)

Token: '='

Analysis:
This is a consequence of the fact that sets are implemented as bitsets and
the bitset is currently limited to 32-bits:

########src/106-bubblesort.pas########
########src/107-quicksort.pas########

These two examples compile fine but no output appears on stdout.  Perhaps
they crash silently?  Perhaps they hang reading input? (I think the latter)

########src/108-pointerrecode.pas########
Line 0:0004 Error 1e Token 01 (RECDATA)

Line:
type
  rptr = ^recdata; <<< HERE
  recdata = record
    number : integer;
    code : string;
    nextrecord : rptr
  end;

Error:
#define eINVTYPE         ((uint16_t) 0x1e)

Token:
#define tIDENT           0x01

Analysis:
Fails because recdata is not defined yet and the forward reference is not supported.

########src/109-findwords.pas########
Line 0:0018 Error 1e Token 01 (list)

Same issue as src/108-pointerrecode.pas

########src/601-writefile.pas########
Compiles okay, runs without error, creates the students.dat file.  However
the content of the file is garbage.

########src/603-appendfile.pas########
Line 0:0020 Error 2d Token 4b

Line:
 20      readln(myfile, info);

Error:
222 #define ePTRADR          ((uint16_t) 0x2d)

Token:
 83 #define sSTRING          0x4b /* String storage type */

Analysis:
Not yet analyzed.  Perhaps an issue related to string types.

########src/604-addfiledata.pas########
Line 0:0052 Error 2d Token 4b

Line:
 52    readln(filename);
Where:O
  7 var
  9    filename: string;

Error:
224 #define ePTRADR          ((uint16_t) 0x2d)

Token:
 83 #define sSTRING          0x4b /* String storage type */

Analysis:
Same as src/605-subprogram.pas

########src/605-subprogram.pas########
Line 0:0052 Error 2d Token 4b

Line:
 52    readln(filename);
Where:O
  7 var
  9    filename: string;

Error:
224 #define ePTRADR          ((uint16_t) 0x2d)

Token:
 83 #define sSTRING          0x4b /* String storage type */

Analysis:
The error occurs in ptrFactor().  Pointers to strings not supported because
there are no pointer variables in memory yet.

########sinecos.pas########
########unit-cosine.pas########
########unit-sine.pas########
########unit-data.pas########
########sinecos.pex########
NOW:
---

ERROR: pexec_WriteString: Not open for writing: 0
ERROR: pexec_WriteReal: Not open for writing: 0
ERROR: pexec_WriteString: Not open for writing: 0
ERROR: pexec_WriteReal: Not open for writing: 0
ERROR: pexec_WriteString: Not open for writing: 0
ERROR: pexec_WriteReal: Not open for writing: 0
ERROR: pexec_WriteChar: Not open for writing: 0
sinecos.pex Loaded
Enter radians   : cos(0.707107)=0.707107
sin(0.707107)=0.000000

Analysis:
The error occurs in the main block in the statement:

   19    writeln('sin(', x, ')**2 + cos(', x, ')**2=', myone)

I can see that something in the logic of the function myone corrupts that stack:

The value of OUTPUT on the stack is 1 prior to calling 'myone' but has changed
to 0 on return, casing the error (0 is INPUT which is not open for writing).
The 'myone' is in unit-data.pas

BEFORE:
------

sinecos.pex Loaded
Enter radians   : cos(0.707107)=0.707107
sin(0.707107)=-1049815400776833903362048.000000
sin(0.703117)**2 + cos(0.703117)**20.000000

Compiles, links, and runs OK but the results don't look right.

########worksched.pas########
Line 0:0055 Error 2f Token 2c

Error:
#define eRBRACKET        ((uint16_t) 0x2f)

Line:
 55        ScheduleType = ARRAY [HourType, DayType] OF EmployeeType;
where
 50        EmployeeType = string[EmployeeMaxLen];

Token: ','

Analysis:
The compiler did not recognize the second index.  Apparently multi-dimensioned arrays have problems.

########DayIO.pas########
+Line 0:0060 Error 0d Token 3b

Line:
        DayMap: ARRAY[DayType] of DayStrType;

Where:
 14    TYPE
 16        DayType = (Sun, Mon, Tue, Wed, Thu, Fri, Sat, BadDay);
 52    CONST
 54        DaySize = 3;
 55    TYPE
 57        DayStrType = STRING[DaySize];

Error:
191 #define eHUH             ((uint16_t) 0x0d)

Token: '='

Analysis:
I have not really looked into this yet, but I suspect the type definition at
line 57 is the issue:  Sized strings like this are not supported.

########worksched.pex########
ERROR: Could not open worksched.o: No such file or directory
ERROR: Error opening 'worksched.pex': 2
ERROR: Could not load worksched.pex