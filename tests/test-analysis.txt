testall.sh compiles all (most) of the pascal source files in the src/ sub-
directory.  The src/ sub-directory contains various pascal programs found by
scouring the internet (most not attributed here.. sorry).  As of this
writing, the following errors are reported when testall.sh is ran:

 1. Several test cases found on the internet failed because they involved the
    use of non-standard Pascal types('filename', 'list', 'word', 'longword) and
    undefined functions, and  procedures (fsplit, addr, length, lowercase,
    etc.).  FreePascal examples, in particular, use a object-base Pacal variant
    which has compatible differences with this more traditional, procedural
    pascal.  These test cases have been removed because there will never
    compile.

 2. There are a couple of files with initialization like:

      input = 1;
      output = 2;

    I am not sure what these mean and have just commented them out for now.
    Assignment of a numeric value to a file is not supported.

 3. There are some files that have Turbo-Pascal style constructions.  For
    example, DayIO.pas used BEGIN rather than INITIALIZATION to introduce
    the initializers in a Unit file.  I have done a good faith effort to
    support Turbo-Pascal-isms whereever possible.

Successful test results are not shown.

########src/008-setcolors.pas########/
Line 0:0008 Error 0a Token 3a

Line:
 7 const
 8 names : array [color] of String[7]
     = ('red', 'blue', 'yellow', 'green', 'white', 'black', 'orange');

Error:
186 #define eEQ              ((uint16_t) 0x0a) <-- Expected '='

Token: ':'

Analysis:
This fails because the compiler does not expect encounter a type in a const
definition.  The function pas_DeclareConst() always expects to see '='
following the constant identifier.

An appropriate fix might involve repartitioning pas_DeclareVar() so that the
part that creates the (nameless) type could be called from pas_DeclareConst().

########src/107-quicksort.pas########
Comples error free but hangs at run-time.  Perhaps it is only waiting on input.

########src/115-pointerrecord.pas########
Line 0:0030 Error 2b Token b1

Line:
 30    new( insertptr );

Error:
235 #define eNOTYET          ((uint16_t) 0x2b)

Token:
174 #define tSTDPROC         0xb1

Analysis:
I have not yet implemented new() and dispose().

########src/116-findwords.pas########
Line 0:0061 Error 2b Token b1

Line:
 61          dispose( templ )                  { free current list        }

Error:
235 #define eNOTYET          ((uint16_t) 0x2b)

Analysis:
I have not yet implemented new() and dispose().

########src/601-writefile.pas########
Compiles okay, runs without error, creates the students.dat file.  However
the content of the file is garbage.

This occurs because this is a fixed-length file of records, each record
containing type STRING which is variable length.  The code is writing the 4 byte
binary STRING container to the file, but not the string data itself.

Using the default string size is not a really good solution:  It can be quite
large and may not be the same from run-to-run.  A better solution would be to
use the string allocation setting to insure a consistent, known maximum string length.  For example:

  VAR
    text_message : string[22];

########sinecos.pas########
########unit-cosine.pas########
########unit-sine.pas########
########unit-data.pas########
########sinecos.pex########
NOW:
---
sinecos.pex Loaded
Enter radians   : cos(0.707107)=0.707107
sin(0.707107)=0.000000
Runtime error 0xa9 -- Execution Stopped

Analysis:
The error occurs in the main block in the statement:

   19    writeln('sin(', x, ')**2 + cos(', x, ')**2=', myone)

It fails because the OUPUT file number has been clobbered.  It was correctly
initialzed to 1 when the program started but was clobbered and overwritten
with zero by the procedure checkvars called at line 18 before this.

However, I suspect a linking problem and checkvars may not in fact be the
problem.

BEFORE:
------

sinecos.pex Loaded
Enter radians   : cos(0.707107)=0.707107
sin(0.707107)=-1049815400776833903362048.000000
sin(0.703117)**2 + cos(0.703117)**20.000000

Compiles, links, and runs OK but the results don't look right.

########worksched.pas########
########DayIO.pas########
########worksched.pex########
These two Pascal files compile fine, but I did make two changes to
worksched.pas for the clean compilation.  I changed:

 381        FUNCTION Map24to12(HourType: HourType): integer;

To:

 381        FUNCTION Map24to12(Hour: HourType): integer;

Where HourType is a sub-range.  Based on the usage, this change seems
correct but, moreover, in my case the partial declaration of the parameter
HourType was sufficient to occlude the type HourType.

I also reorganized the program blocks.  They were in the order:  CONST,
TYPE, PROCEDURES and FUNCTIONS, VAR then the main BEGIN-END.  I moved the
VAR section to before PROCEDURES and FUNCTIONS.

No real changes were made to the unit DayIO.pas.

However, when building the combined PEX file, the optimizer, popt, coredumps
before the object is generated.
