testall.sh compiles all (most) of the pascal source files in the src/ sub-
directory.  The src/ sub-directory contains various pascal programs found by
scouring the internet (most not attributed here.. sorry).  As of this
writing, the following errors are reported when testall.sh is ran:

 1. Several test cases found on the internet failed because they involved the
    use of non-standard Pascal types('filename', 'list', 'word', 'longword) and
    undefined functions, and  procedures (fsplit, addr, length, lowercase,
    etc.).  These test cases have been removed because there will never
    compile.

 2. Forward references to variables before they are defined do not work.  See
    failure in src/108-pointerrecode.pas.

 3. There are a couple of files with initialization like:

      input = 1;
      output = 2;

    I am not sure what these mean and have just commented them out for now.
    Assignment of a numeric value to a file is not supported.

 4. Pascal runtime memory is divided into three regions:  String stack, RO
    data, and the Pascal run-time stack.  The size of the string stack is
    set with the -t option to prun and 1024 is the default size used by the
    testone.sh script.  String allocations are large, 256 bytes, and the
    string stack cleanup is lazy; perhaps only when a procedure/function
    returns.  As a result, programs with functions that do a lot of string
    operations need a start larger than the 1024 default.  All of the test
    files here work OK with a string stack of 1024.

    This problem is largely alleviated by using short strings that do not
    require such large string stack allocations.

 5. There are some files that have Turbo-Pascal style constructions.  For
    example, DayIO.pas used BEGIN rather than INITIALIZATION to introduce
    the initializers in a Unit file.  I have done a good faith effort to
    support Turbo-Pascal-isms whereever possible.

Successful test results are not shown.

########src/008-setcolors.pas########/
Line 0:0008 Error 0a Token 3a

Line:
 7 const
 8 names : array [color] of String[7]
     = ('red', 'blue', 'yellow', 'green', 'white', 'black', 'orange');

Error:
186 #define eEQ              ((uint16_t) 0x0a) <-- Expected '='

Token: ':'

Analysis:
This fails because the compiler does not expect encounter a type in a const
definition.  The function pas_DeclareConst() always expects to see '='
following the constant identifier.

An appropriate fix might involve repartitioning pas_DeclareVar() so that the
part that creates the (nameless) type could be called from pas_DeclareConst().

########src/018-setops.pas########
Compiles and runs but the card() set operation prints garbage value.  I am not
sure why this is; when I single step through the code, it prints the correct
value, but when I execute it normally, the value returned by card() is bogus.

########src/104-primes.pas########
Line 0:0034 Error 51 Token 55

Line:
 30   with next do
 34     primes[word] := primes[word] + [bit];
Where:
 13   next : record
 14            word, bit : integer
 15          end;

Error:
271 #define eSET             ((uint16_t) 0x51)

Token:
 98 #define sRECORD_OBJECT   0x55

Analysis:
Apparently the WITH record logic is broken.  the compiler sees the record
bject 'bit' but does not connect it with the preceding WITH statement.

########src/107-quicksort.pas########
Comples error free but hangs at run-time.  Perhaps it is waiting on input.

########src/108-pointerrecode.pas########
Line 0:0004 Error 1e Token 01 (RECDATA)

Line:
type
  rptr = ^recdata; <<< HERE
  recdata = record
    number : integer;
    code : string;
    nextrecord : rptr
  end;

Error:
#define eINVTYPE         ((uint16_t) 0x1e)

Token:
#define tIDENT           0x01

Analysis:
Fails because recdata is not defined yet and the forward reference is not supported.

########src/109-findwords.pas########
Line 0:0018 Error 1e Token 01 (list)

Same issue as src/108-pointerrecode.pas

########src/601-writefile.pas########
Compiles okay, runs without error, creates the students.dat file.  However
the content of the file is garbage.

This occurs because this is a fixed-length file of records, each record
containing type STRING which is variable length.  The code is writing the 4 byte
binary STRING container to the file, but not the string data itself.

Using the default string size is not a really good solution:  It can be quite
large and may not be the same from run-to-run.  A better solution would be to
use the string allocation setting to insure a consistent, known maximum string length.  For example:

  VAR
    text_message : string[22];

########src/604-addfiledata.pas########
########src/605-subprogram.pas########

Both of these examples compile fine and appear to run, but give the wrong
final answer:

Average Rainfall:  3.23500072

This comes from:
 47    writeln('Average Rainfall: ', average:7:2);

Notice the file width and precision arguments.  That is the 7 and the 2
printed at the end of the output.  For all types, the form is:

  Value : field_width

Real types can also have precision:

  Value : field_width : decimal_field_width

This is true at least for Free Pascal.

########sinecos.pas########
########unit-cosine.pas########
########unit-sine.pas########
########unit-data.pas########
########sinecos.pex########
NOW:
---
sinecos.pex Loaded
Enter radians   : cos(0.707107)=0.707107
sin(0.707107)=0.000000
Runtime error 0xa9 -- Execution Stopped

Analysis:
The error occurs in the main block in the statement:

   19    writeln('sin(', x, ')**2 + cos(', x, ')**2=', myone)

It fails because the OUPUT file number has been clobbered.  It was correctly
initialzed to 1 when the program started but was clobbered and overwritten
with zero by the procedure checkvars called at line 18 before this.

However, I suspect a linking problem and checkvars may not in fact be the
problem.

BEFORE:
------

sinecos.pex Loaded
Enter radians   : cos(0.707107)=0.707107
sin(0.707107)=-1049815400776833903362048.000000
sin(0.703117)**2 + cos(0.703117)**20.000000

Compiles, links, and runs OK but the results don't look right.

########worksched.pas########
########DayIO.pas########
########worksched.pex########
These two Pascal files compile fine, but I did make two changes to
worksched.pas for the clean compilation.  I changed:

 381        FUNCTION Map24to12(HourType: HourType): integer;

To:

 381        FUNCTION Map24to12(Hour: HourType): integer;

Where HourType is a sub-range.  Based on the usage, this change seems
correct but, moreover, in my case the partial declaration of the parameter
HourType was sufficient to occlude the type HourType.

I also reorganized the program blocks.  They were in the order:  CONST,
TYPE, PROCEDURES and FUNCTIONS, VAR then the main BEGIN-END.  I moved the
VAR section to before PROCEDURES and FUNCTIONS.

No real changes were made to the unit DayIO.pas.

However, when building the combined PEX file, the optimizer, popt, coredumps
before the object is generated.
