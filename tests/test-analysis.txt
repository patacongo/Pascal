testall.sh compiles all (most) of the pascal source files in the src/ sub-directory.  The src/ sub-directory contains various pascal programs found by scouring the internet (most not attributed here.. sorry).  As of this writing, the following errors are reported when testall.sh is ran:

 1. Several test cases fail because the involve use of non-standard Pascal types
    (filename, list, word) and undefined procedures (fsplit, addr).
    test cases using the list type probably have been removed; For testing purposes,
    the filename type has been changed to the string type.
    According to freepascal.org, fsplit is a procedure in a unit called DOS.  I am
    not sure how standard that unit is.
 2. Currently a set is limited to 32-bits to so that they can be represented internally
    as a 32-bit bit set.
 3. Input procedures in writeln() take the file number as an optional first parameter.
    If the optional file parameter is not supplied then the file associated with the
    built-in variable input is tested.  Similarly, ouoptout procedures would default to
    the built-in output.
    This has been fixed for some functions (like eof and eoln) but not all cases have been
    verified.
 4. Operations on type 'string' are not yet supported
 5. I/O operations on most types of arrays and VAR arrays are not fully
    implemented.  See rc/107-quicksort.pas
 6. Forward references to variables before the are defined to not work.  See
    src/108-pointerrecode.pas
 7. The are a bunch of scoping issues.  There is a kludge in place that allows nested formal
    parameters to have the same name as variables declared with wider cop e.  Basically it
    just suppresses symbol table lookup.  But this is a bad solution since it then permits
    formal parameters to have the same name.
 8. More scoping problems with local variables as seen in src/112-localscope.pas.  The
    kludge used for formal parmeters (above) cannot be used with local variables.  I think
    that we need to extend the symbol lookup so that it can look at the current local scope
    or at the the entire scope based on the current staic nesting level.  This would have
    to be a backward search from the current nesting level down.
 9. Unit files with data declarations, but no implementation.
10. General usage of units.  Most of these are not skipped by testall.sh.

Successful test results are not shown.

########src/104-primes.pas########
Line 0:0012 Error 47 Token 3b

Line (in var section):
 12   sieve, primes : array[0..w] of set of 0..maxbit;

Where (in const section)
  8   maxbit = 58;

Error:
244 #define eSETRANGE        ((uint16_t) 0x47)

Analysis:
This is a consequence of the fact that sets are currently limited to 32-bits:

########src/107-quicksort.pas########
Line 0:0024 Error 41 Token 29

Line:
 24                readln(a[size]);

Where a is a formal parameter of type 'VAR a: IntArrType' and where

    CONST
        MaxElts = 50;
    TYPE
        IntArrType = ARRAY [1..MaxElts] OF Integer;

Error:
238 #define eARRAYTYPE       ((uint16_t) 0x41)

Token:
')'

Analysis:

I see a different error when running from GDB:

Fatal Error 23 -- Compilation aborted

Line:
#0  error (errcode=23) at perr.c:129
#1  0x000000010040bbba in readText (fileNumber=0) at pproc.c:470

          /* Otherwise, we fall through to process the ARRAY like any */
          /* expression */

        default :

          switch (varParm(exprUnknown, NULL))
            {
            ...
            default :
              error(eINVARG);  <<< HERE
              break;
            }
          break;

Error:
193 #define eINVARG          ((uint16_t) 0x17)

Token:
(gdb) p /x token
$1 = 0x29

This error occurs because varParm() returns expArrayPtr but there is no code generation logic in the switch statement for that case.

########src/108-pointerrecode.pas########
Line 0:0004 Error 1e Token 01 (RECDATA)

Line:
type
  rptr = ^recdata; <<< HERE
  recdata = record 
    number : integer; 
    code : string; 
    nextrecord : rptr 
  end;

Error:
#define eINVTYPE         ((uint16_t) 0x1e)

Token:
#define tIDENT           0x01

Analysis:
Fails becuase recdata is not defined yet and the forward reference is not supported.

########src/109-findwords.pas########
Line 0:0018 Error 1e Token 01 (LIST)

After commenting out re-definition of boolean constants:

const
    { TRUE = 1;
      FALSE = 0; }

Line:
type
     listptr = ^list;  <<< HERE
     list = record
              line : integer;       { line number of occurrence     }
              nextline : listptr;   { link to next line number      }
              prevline : listptr    { link to previous line number  }
     end;

Error:
#define eINVTYPE         ((uint16_t) 0x1e)


Token:
#define tIDENT           0x01


Analysis:
Same problem as with src/108-pointerrecode.pas:  Use of forward reference to define a pointer variable fails.

########src/112-localscope.pas########
NOTE:  This test currently passes with this kludge in place:

--- a/pascal/pblck.c
+++ b/pascal/pblck.c
@@ -777,10 +777,10 @@ static STYPE *pas_DeclareVar(void)
   if (token == ',')
     {
       /* Yes ..Process the next identifer in the indentifier list
-       * via recursion
+       * via recursion (suppressing symbol conversion so that).
        */

-      getToken(false);
+      getToken(true);
       if (token != tIDENT) error(eIDENT);
       else typePtr = pas_DeclareVar();
     }

But that is a bad change as described in the introcution.  If that change is backed out, then I see this problem:

Line 0:0006 Error 0e Token 46

Line:
static STYPE *pas_DeclareVar(void)
{
  typePtr  = NULL;

  varName = tkn_strt;
  getToken(false);

  if (token == ',')
    {
      getToken(false);
      if (token != tIDENT) error(eIDENT); <<< here
      else typePtr = pas_DeclareVar();
    }

Error:
#define eIDENT           ((uint16_t) 0x0e)

Token:
#define sINT             0x46

Analysis:
Fails parsing this line:
 
var 
   a, b, c: integer; (second occurrence)

Basically an indentier is expected but instead we get the variables or the same name defined at wider scope.

########src/803-redirect.pas########
Line 0:0065 Error 1e Token 3d

Line:
 65         if (name = 'lstnavigation') or (name = 'navigation') or (name = 'goto') then

Error:
200 #define eINVTYPE         ((uint16_t) 0x1e)

Token:
 66 #define tEQ              ('=')

Analysis:
Failure occurs while processing the 'line' symbol:

  (gdb) p tkn_strt
  $2 = 0x80008a291 "NAME"

On the second time through simpleFactor
(gdb) bt
#0  error (errcode=30) at perr.c:128
#1  0x0000000100408d6e in simpleFactor (varPtr=0xffffc590, factorFlags=9 '\t') at pexpr.c:1649
&&&& simpleFactor: token=3d ('=') sKind=57
 93 #define sVAR_PARM        0x57

#2  0x0000000100408cbb in simpleFactor (varPtr=0xffffc590, factorFlags=9 '\t') at pexpr.c:1621
&&&& simpleFactor: token=3d ('=') sKind=4b
 81 #define sSTRING          0x4b /* String storage type */

#3  0x0000000100408240 in complexFactor () at pexpr.c:1171
...

The problem is that operations on the 'string' are not yet implemented.

########src/901-pageutils.pas########
Line 0:0654 Error 0f Token 45

Line:
 654 input = 1;

Error:
184 #define eIMPLEMENTATION  ((uint16_t) 0x0f)

Token:
 75 #define sFILE            0x45

Analysis:
This is a unit with constant/variable/procedure definitions.  It has no implementation section at the end as does a normal program file.

########src/501-uses.pex########
Fatal Error 41 -- Aborting

Error:
238 #define eARRAYTYPE       ((uint16_t) 0x41)

Analysis:
This is an issue with using units.  They appear not to work.
